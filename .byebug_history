exit
<<<<<<< HEAD
c
answer
c
answer
c
answer
exit
answer
c
answer[0]
answer.count
n
answer
c
answer
amswer
text
exit
c
text
c
text
c
text
c
text
c
text
answer
c
x
text
c
text
answer
c
answer
c
answer
c
answer
c
answer
c
answer
c
answer
c
answer
c
answer
c
answer[0].bot_answers
answer[0]bot_answers
answer.bot_answers
answer.bot_answer
answer
c
QuestionAnswer.where(['keyword LIKE ?' , "Wassup"])
QuestionAnswer.where(['keywords LIKE ?' , "Wassup"])
QuestionAnswer.where(['keywords LIKE ?' , "Hi"])
answer
c
answer
c
n
c
answer
c
answer
c
answer[0].bot_answers
answer.bot_answers
answer
c
QuestionAnswer.where(['user_says LIKE ?' , "#{text}"])
QuestionAnswer.where(['user_says LIKE ?' , #{text}])
QuestionAnswer.where(['user_says LIKE ?' , text])
QuestionAnswer.where(['user_says LIKE ?' , "Hello"])
QuestionAnswer.where(['user_says LIKE ?' , "%#{Hello}%"])
QuestionAnswer.where(['user_says LIKE ?' , "%#{text}%"])
answer
exit
c
n
answer.bot_answers
answer
text
c
message:
coordinates
coordiates
payload
n
long
lat
quit
q
d
s
a
bot
@bot
c
Bot.find_by(uri: params[:uri])
@bot
c
@bot = Bot.find_by(uri: params[:uri])
@bot
c
=======
@question_answers
@question_answerws
exit
QuestionAnswers.all
@bot
exit
n.question_answers
current_user
n.name
exit
if n.question_answers
n.question_answers
n.name
n
>>>>>>> master
exit
a.size
a.class
a[0]
a[1]
a[02]
a.class
a=name.body.split
name.body.split
name.body.class
name.body.first_name
name.body
name.headers
name.response
name
a
HTTParty::Response.class_attribute
HTTParty::Response.class_to_obj
HTTParty::Response.parsed_response
HTTParty::Response.params
HTTParty::Response.first_name
HTTParty::Response.class
HTTParty::Response
HTTPParty::Response
name.class.first_name
name.class
first_name
Response
name
exit
name
exit
sender.class
sender.string
sender
